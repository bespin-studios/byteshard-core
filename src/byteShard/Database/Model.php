<?php
/**
 * @copyright  Copyright (c) 2009 Bespin Studios GmbH
 * @license    See LICENSE file that is distributed with this source code
 */

namespace byteShard\Database;

use byteShard\Cell;
use byteShard\Database;
use byteShard\Database\Enum\ConnectionType;
use byteShard\DataModelInterface;
use byteShard\Enum\DB\ColumnType;
use byteShard\Environment;
use byteShard\Exception;
use byteShard\Internal\Debug;
use byteShard\Internal\Schema\DB\UserTable;
use byteShard\Session;
use byteShard\Settings;

class Model implements DataModelInterface
{
    private UserTable $schema;
    private string    $dbDriver;

    public function __construct()
    {
        global $dbDriver;
        $this->dbDriver = $dbDriver;
    }

    public function setUserTableSchema(UserTable $schema): void
    {
        $this->schema = $schema;
    }

    /** @throws Exception */
    public function getLastTab(int $userId): string
    {
        if ($this->schema->getFieldNameLastTab() !== null && $this->schema->getTableName() !== null && $this->schema->getFieldNameUserId() !== null && $this->schema->getFieldTypeUserId() !== null) {
            global $dbDriver;
            switch ($dbDriver) {
                case Environment::DRIVER_PGSQL_PDO:
                case Environment::DRIVER_MYSQL_PDO:
                    $record = Database::getSingle('SELECT '.$this->schema->getFieldNameLastTab().' AS lasttab FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getFieldNameUserId().'=:userId', ['userId' => $userId]);
                    if ($record !== null) {
                        return $record->lasttab ?? '';
                    }
                    break;
                default:
                    $record = Database::getSingle('SELECT '.$this->schema->getFieldNameLastTab().' AS lasttab FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getFieldNameUserId().'='.$this->schema->getEscapedUserID($userId));
                    if ($record !== null) {
                        return $record->lasttab ?? '';
                    }
                    break;
            }
        }
        return '';
    }

    public function getPasswordHash(string $username): ?string
    {
        $passwordColumnName = $this->schema->getFieldNameLocalPassword();
        $query              = 'SELECT '.$passwordColumnName.' FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getFieldNameUsername().'=:username';
        $parameters         = ['username' => $username];
        switch ($this->dbDriver) {
            case Environment::DRIVER_PGSQL_PDO:
                $record             = Database::getSingle(strtolower($query), $parameters);
                $passwordColumnName = strtolower($passwordColumnName);
                break;
            case Environment::DRIVER_MYSQL_PDO:
                $record = Database::getSingle($query, $parameters);
                break;
            default:
                //TODO: implement
                $record = null;
        }
        if ($record === null) {
            return null;
        }
        return $record->{$passwordColumnName} ?? '';
    }

    // return null if password never expires
    public function getPasswordExpiration(string $username): ?object
    {
        $expires = $this->schema->getFieldNameLocalPasswordExpires();
        if (empty($expires)) {
            return null;
        }
        $expiresAfterDays = $this->schema->getFieldNameLocalPasswordExpiresAfterDays();
        $lastChange       = $this->schema->getFieldNameLocalPasswordLastChange();
        if (empty($expiresAfterDays) || empty($lastChange)) {
            throw new Exception('Password is supposed to expire but no columns for lastChange or expiresAfterDays have been defined');
        }
        $columns = [
            $expires.' AS expires',
            $expiresAfterDays.' AS expiresAfterDays',
            $lastChange.' AS lastChange'
        ];
        return Database::getSingle('SELECT '.implode(', ', $columns).' FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getFieldNameUsername().'=:username', ['username' => $username]);
    }

    /**
     * @throws Exception
     */
    public function updatePasswordHash(string $username, string $hash): void
    {
        $query      = 'UPDATE '.$this->schema->getTableName().' SET '.$this->schema->getFieldNameLocalPassword().'=:hash WHERE '.$this->schema->getFieldNameUsername().'=:username';
        $parameters = ['hash' => $hash, 'username' => $username];
        switch ($this->dbDriver) {
            case Environment::DRIVER_PGSQL_PDO:
                Database::update(strtolower($query), $parameters);
                break;
            case Environment::DRIVER_MYSQL_PDO:
                Database::update($query, $parameters);
                break;
            default:
                // not prepared statement, but should be ok since the user already logged in so the username has to be a valid username and the password is generated by the php hashing function
                $connection = Database::getConnection(ConnectionType::WRITE);
                $connection->execute('UPDATE '.$this->schema->getTableName().' SET '.$this->schema->getFieldNameLocalPassword().'=\''.$hash.'\' WHERE '.$this->schema->getFieldNameUsername().'=\''.$username.'\'');
                break;
        }
    }

    /** @throws Exception */
    public function setLastTab(int $userId, string $lastTab): bool
    {
        if ($this->schema->getFieldNameLastTab() !== null && $this->schema->getTableName() !== null && $this->schema->getFieldNameUserId() !== null && $this->schema->getFieldTypeUserId() !== null) {
            $table         = $this->schema->getTableName();
            $lastTabColumn = $this->schema->getFieldNameLastTab();
            $userIdColumn  = $this->schema->getFieldNameUserId();
            switch ($this->dbDriver) {
                case Environment::DRIVER_PGSQL_PDO:
                    $rs = Database::getSingle(strtolower('SELECT '.$lastTabColumn.' as lasttab FROM '.$table.' WHERE '.$userIdColumn).'=:userId', ['userId' => $userId]);
                    if ($rs !== null && ($rs->lasttab === null || $rs->lasttab !== $lastTab)) {
                        if (Settings::logTabChangeAndPopup() === true) {
                            Debug::notice('[Tab] '.$lastTab);
                        }
                        Database::update('UPDATE '.$table.' SET '.strtolower($lastTabColumn).'=:lastTab WHERE '.strtolower($userIdColumn).'=:userId', ['lastTab' => $lastTab, 'userId' => $userId]);
                    }
                    break;
                case Environment::DRIVER_MYSQL_PDO:
                    $rs = Database::getSingle('SELECT '.$lastTabColumn.' as lasttab FROM '.$table.' WHERE '.$userIdColumn.'=:userId', ['userId' => $userId]);
                    if ($rs !== null && ($rs->lasttab === null || $rs->lasttab !== $lastTab)) {
                        if (Settings::logTabChangeAndPopup() === true) {
                            Debug::notice('[Tab] '.$lastTab);
                        }
                        Database::update('UPDATE '.$table.' SET '.$lastTabColumn.'=:lastTab WHERE '.$userIdColumn.'=:userId', ['lastTab' => $lastTab, 'userId' => $userId]);
                    }
                    break;
                default:
                    $query = 'SELECT '.$lastTabColumn.' FROM '.$table.' WHERE '.$userIdColumn.'='.$this->schema->getEscapedUserID($userId);
                    $rs    = Database::getRecordset($cn = Database::getConnection(ConnectionType::WRITE));
                    $rs->open($query);
                    if (($rs->fields[$lastTabColumn] === null || $rs->fields[$lastTabColumn] !== $lastTab) && $rs->recordcount() === 1) {
                        if (Settings::logTabChangeAndPopup() === true) {
                            Debug::notice('[Tab] '.$lastTab);
                        }
                        $rs->fields[$lastTabColumn] = $lastTab;
                        $rs->update();
                    }
                    $rs->close();
                    $cn->disconnect();
                    break;
            }
        }
        return true;
    }

    /** @throws Exception */
    public function storeUserSetting(string $tabName, string $cellName, string $type, string $item, int $userId, $value): bool
    {
        global $dbDriver;
        switch ($dbDriver) {
            case Environment::DRIVER_PGSQL_PDO:
            case Environment::DRIVER_MYSQL_PDO:
                $fields          = [
                    'UserId' => $userId,
                    'Tab'    => $tabName,
                    'Cell'   => $cellName,
                    'Type'   => $type,
                    'Item'   => $item
                ];
                $query           = /** @lang PostgreSQL */
                    'SELECT count(1) AS Cnt FROM tbl_User_Settings WHERE User_id=:UserId AND Tab=:Tab AND Cell=:Cell AND Type=:Type AND Item=:Item';
                $result          = Database::getSingle($query, $fields);
                $fields['Value'] = $value;
                if ($result === null) {
                    $query = /** @lang PostgreSQL */
                        'INSERT INTO tbl_User_Settings (User_ID, Tab, Cell, Type, Item, Value) VALUES (:UserId, :Tab, :Cell, :Type, :Item, :Value)';
                    Database::insert($query, $fields);
                } else {
                    $query = /** @lang PostgreSQL */
                        'UPDATE tbl_User_Settings SET Value=:Value WHERE User_ID=:UserId AND Tab=:Tab AND Cell=:Cell AND Type=:Type AND Item=:Item';
                    Database::update($query, $fields);
                }
                break;
            default:
                $rs = Database::getRecordset($cn = Database::getConnection(ConnectionType::WRITE));
                /** @noinspection SqlNoDataSourceInspection SqlDialectInspection */
                $rs->open('SELECT User_ID, Tab, Cell, Type, Item, Value FROM tbl_User_Settings WHERE User_ID='.$userId." AND Tab='".str_replace('\\', '\\\\', $tabName)."' AND Cell='".$cellName."' AND Type='".$type."' AND Item='".$item."'");
                if ($rs->recordcount() === 0) {
                    $rs->addnew();
                    $rs->fields['User_ID'] = $userId;
                    $rs->fields['Tab']     = $tabName;
                    $rs->fields['Cell']    = $cellName;
                    $rs->fields['Type']    = $type;
                    $rs->fields['Item']    = $item;
                    $rs->fields['Value']   = $value;
                    $rs->update();
                } elseif ($rs->recordcount() === 1) {
                    $rs->fields['Value'] = $value;
                    $rs->update();
                }
                $rs->close();
                $cn->disconnect();
                break;
        }
        return true;
    }

    /** @throws Exception */
    public function deleteUserSetting(string $tabName, string $cellName, string $type, string $item, int $userId): bool
    {
        global $dbDriver;

        switch ($dbDriver) {
            case Environment::DRIVER_PGSQL_PDO:
            case Environment::DRIVER_MYSQL_PDO:
                $fields = [
                    'UserId' => $userId,
                    'Tab'    => $tabName,
                    'Cell'   => $cellName,
                    'Type'   => $type,
                    'Item'   => $item
                ];
                /** @noinspection SqlNoDataSourceInspection SqlDialectInspection */
                $query = 'DELETE FROM tbl_User_Settings WHERE User_ID=:UserId AND Tab=:Tab AND Cell=:Cell AND Type=:Type AND Item=:Item';
                Database::delete($query, $fields);
                break;
            default:
                $rs = Database::getRecordset($cn = Database::getConnection(ConnectionType::WRITE));
                /** @noinspection SqlNoDataSourceInspection SqlDialectInspection */
                $rs->open('SELECT Value FROM tbl_User_Settings WHERE User_ID='.$userId." AND Tab='".$tabName."' AND Cell='".$cellName."' AND Type='".$type."' AND Item='".$item."'");
                if ($rs->recordcount() === 1) {
                    $rs->delete();
                }
                $rs->close();
                $cn->disconnect();
                break;
        }
        return true;
    }

    /** @throws Exception */
    public function isServiceAccount(int $userId): bool
    {
        global $dbDriver;
        $record = match ($dbDriver) {
            Environment::DRIVER_PGSQL_PDO,
            Environment::DRIVER_MYSQL_PDO => Database::getSingle('SELECT '.$this->schema->getFieldNameServiceAccount().' FROM '.$this->schema->getTableName().'  WHERE '.$this->schema->getFieldNameUserId().'=:userId', [
                'userId' => $userId
            ]),
            default                       => Database::getSingle('SELECT '.$this->schema->getFieldNameServiceAccount().' FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getFieldNameUserId().'='.((ColumnType::is_string($this->schema->getFieldTypeUserIdEnum()) === true) ? "'".$userId."'" : $userId)),
        };
        return $record !== null && isset($record->{$this->schema->getFieldNameServiceAccount()}) && (bool)$record->{$this->schema->getFieldNameServiceAccount()} === true;
    }

    /** @throws Exception */
    public function getCellSize(int $userId): array
    {
        global $dbDriver;
        /** @noinspection SqlNoDataSourceInspection SqlDialectInspection */
        return match ($dbDriver) {
            Environment::DRIVER_PGSQL_PDO,
            Environment::DRIVER_MYSQL_PDO => Database::getArray("SELECT Tab, Cell, Type, Value FROM tbl_User_Settings WHERE Type IN ('".Cell::HEIGHT."', '".Cell::WIDTH."', '".Cell::COLLAPSED."') AND User_ID=:userId", ['userId' => $userId]),
            default                       => Database::getArray("SELECT Tab, Cell, Type, Value FROM tbl_User_Settings WHERE Type IN ('".Cell::HEIGHT."', '".Cell::WIDTH."', '".Cell::COLLAPSED."') AND User_ID='".Session::getUserId()."'"),
        };
    }

    /** @throws Exception */
    public function successfulLoginCallback(int $userId): bool
    {
        $fields = [];
        if ($this->schema->getFieldNameLastLogin() !== '') {
            $fields[] = $this->schema->getFieldNameLastLogin();
        }
        if ($this->schema->getFieldNameLoginCount() !== '') {
            $fields[] = $this->schema->getFieldNameLoginCount();
        }
        if (!empty($fields)) {
            global $dbDriver;
            switch ($dbDriver) {
                case Environment::DRIVER_MYSQL_PDO:
                case Environment::DRIVER_PGSQL_PDO:
                    $set        = [];
                    $parameters = [];
                    if ($this->schema->getFieldNameLastLogin() !== '') {
                        $set[]                                              = $this->schema->getFieldNameLastLogin().'=:'.$this->schema->getFieldNameLastLogin();
                        $parameters[$this->schema->getFieldNameLastLogin()] = date('YmdHis', time());
                    }
                    if ($this->schema->getFieldNameLoginCount() !== '') {
                        $set[] = $this->schema->getFieldNameLoginCount().'='.$this->schema->getFieldNameLoginCount().' + 1';
                    }
                    $parameters['userId'] = $userId;
                    Database::update('UPDATE '.$this->schema->getTableName().' SET '.implode(', ', $set).' WHERE '.$this->schema->getFieldNameUserId().'=:userId', $parameters);
                    break;
                default:
                    $rs = Database::getRecordset($cn = Database::getConnection(ConnectionType::WRITE));
                    $rs->open('SELECT '.implode(',', $fields).' FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getFieldNameUserId().'='.$userId);
                    if ($rs->recordcount() === 1) {
                        if ($this->schema->getFieldNameLastLogin() !== null) {
                            $rs->fields[$this->schema->getFieldNameLastLogin()] = date('YmdHis', time());
                        }
                        if ($this->schema->getFieldNameLoginCount() !== null) {
                            if ($rs->fields[$this->schema->getFieldNameLoginCount()] === null) {
                                $rs->fields[$this->schema->getFieldNameLoginCount()] = 1;
                            } else {
                                $rs->fields[$this->schema->getFieldNameLoginCount()] += 1;
                            }
                        }
                        $rs->update();
                    }
                    $rs->close();
                    $cn->disconnect();
                    break;
            }
        }
        return true;
    }

    /** @throws Exception */
    public function checkGrantLogin(int $userId): bool
    {
        global $dbDriver;
        switch ($dbDriver) {
            case Environment::DRIVER_MYSQL_PDO:
            case Environment::DRIVER_PGSQL_PDO:
                $grantLogin = strtolower($this->schema->getFieldNameGrantLogin());
                $query      = 'SELECT '.$grantLogin.' FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getFieldNameUserId().'=:UserId';
                $tmp        = Database::getSingle($query, ['UserId' => $userId]);
                break;
            default:
                $grantLogin = $this->schema->getFieldNameGrantLogin();
                $query      = 'SELECT '.$this->schema->getFieldNameGrantLogin().' FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getFieldNameUserId().'='.(ColumnType::is_string($this->schema->getFieldTypeUserIdEnum()) === true ? "'".$userId."'" : $userId);
                $tmp        = Database::getSingle($query);
                break;
        }
        if ($tmp === null) {
            Debug::info(__METHOD__.': user not found');
            return false;
        }
        return (bool)$tmp->{$grantLogin};
    }

    /** @throws Exception|\Exception */
    public function checkServiceAccount(int $userId): bool
    {
        global $dbDriver;
        $tmp = match ($dbDriver) {
            Environment::DRIVER_MYSQL_PDO,
            Environment::DRIVER_PGSQL_PDO => Database::getSingle('SELECT '.$this->schema->getFieldNameServiceAccount().' FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getFieldNameUserId().':=userId', ['userId' => $userId]),
            default                       => Database::getSingle('SELECT '.$this->schema->getFieldNameServiceAccount().' FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getFieldNameUserId().'='.(ColumnType::is_string($this->schema->getFieldTypeUserIdEnum()) === true ? "'".$userId."'" : $userId)),
        };
        if ($tmp === null) {
            Debug::info(__METHOD__.': user not found');
            return false;
        }
        return (bool)$tmp->{$this->schema->getFieldNameServiceAccount()};
    }

    /** @throws Exception|\Exception */
    public function getUserId(string $username): ?int
    {
        if ($this->schema->getFieldNameUsername() !== null && $this->schema->getFieldTypeUsername() !== null && $this->schema->getTableName() !== null && $this->schema->getFieldNameUserId() !== null) {
            global $dbDriver;
            $tmp = match ($dbDriver) {
                Environment::DRIVER_PGSQL_PDO,
                Environment::DRIVER_MYSQL_PDO => Database::getSingle('SELECT '.$this->schema->getFieldNameUserId().' FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getTableName().'.'.$this->schema->getFieldNameUsername().'=:userName', ['userName' => $username]),
                default                       => Database::getSingle('SELECT '.$this->schema->getFieldNameUserId().' FROM '.$this->schema->getTableName().' WHERE '.$this->schema->getFieldNameUsername().'='.(ColumnType::is_string($this->schema->getFieldTypeUsernameEnum()) === true ? "'".$username."'" : $username)),
            };
            if ($tmp === null) {
                Debug::info(__METHOD__.': User not found');
                return null;
            } else {
                return (int)$tmp->{$this->schema->getFieldNameUserId()};
            }
        }
        if ($this->schema->getFieldNameUsername() === null) {
            throw new \Exception(__METHOD__.': getFieldNameUsername is undefined in Schema\DB\UserTable');
        }
        if ($this->schema->getFieldNameUsername() === null) {
            throw new \Exception(__METHOD__.': getFieldNameUsername is undefined in Schema\DB\UserTable');
        }
        if ($this->schema->getFieldNameUserId() === null) {
            throw new \Exception(__METHOD__.': getFieldNameUserId is undefined in Schema\DB\UserTable');
        }
        throw new \Exception(__METHOD__.': getTableName is undefined in Schema\DB\UserTable');
    }
}
